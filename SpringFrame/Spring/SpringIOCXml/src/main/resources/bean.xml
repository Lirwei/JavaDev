<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 把对象的创建交给Spring来管理 -->
    <!--
        Spring对bean的管理细节
            1.创建bean的三种方式
                1) 使用默认构造函数创建
                   在Spring配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，
                   采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建
                   <bean id="accountService" class="per.study.service.impl.AccountServiceImpl"></bean>
                2) 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入Spring容器）
                    <bean id="instantFactory" class="per.study.factory.InstantFactory"></bean>
                    <bean id="accountService" factory-bean="instantFactory" factory-method="getAccountService"></bean>
                3) 使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入Spring容器）
                    <bean id="accountService" class="per.study.factory.StaticFactory" factory-method="getAccountService"></bean>

            2.bean对象的作用域
                bean标签中scope属性，指定了bean的作用范围
                    singleton：default
                    prototype
                    request
                    session
                    global-session

                <bean id="accountService" class="per.study.service.impl.AccountServiceImpl" scope="prototype"></bean>

            3.bean对象的生命周期
                单例对象
                    init：当容器创建时对象出生
                    alive：只要容器还在，对象一直活着
                    dead：容器销毁，对象消亡
                    单例对象的生命周期和容器相同

                <bean id="accountService" class="per.study.service.Person"
                      init-method="init" destroy-method="destroy"/>

                原型对象
                    init：使用对象时，由Spring创建
                    alive：对象只要在使用过程中就一直活着
                    dead：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收

    -->
    <bean id="accountService" class="per.study.service.impl.AccountServiceImpl" scope="prototype"
          init-method="init" destroy-method="destroy"/>

</beans>