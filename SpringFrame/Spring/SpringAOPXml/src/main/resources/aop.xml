<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="accountService" class="per.study.service.impl.AccountServiceImpl"/>

    <!--Spring中基于XML的AOP配置步骤
        1、把通知Bean也交给Spring来管理
        2、使用aop:config标签表明开始AOP的配置
        3、使用aop:aspect标签表明配置切面
        4、aop:before        前置通知
                method属性：用于指定Logger类中哪个方法是通知
                pointcut属性：用于指定切入点表达式

                切入点表达式写法实例 execution(public void per.study.service.impl.AccountServiceImpl.saveAccount())
                    访问修饰符可以省略
                    execution( void per.study.service.impl.AccountServiceImpl.saveAccount())
                    execution( * per.study.service.impl.AccountServiceImpl.saveAccount())
                    execution( * *.*.*.*.AccountServiceImpl.saveAccount())
                    execution( * *..AccountServiceImpl.saveAccount())
                    execution( * *..*.saveAccount())
                    execution( * *..*.*())
                    execution( * *..*.*(int))
                    execution( * *..*.*(*))
    -->
    <!--配置Logger类-->
    <bean id="logger" class="per.study.service.Utils.Logger"/>
    <aop:config>
        <!--所有切面可用-->
        <aop:pointcut id="pt1" expression="execution( * *..*.*(..))"/>
        <aop:aspect id="logAdvice" ref="logger">
            <!--<aop:before method="beforePrintLog" pointcut-ref="pt1"/>
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"/>
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"/>
            <aop:after method="afterPrintLog" pointcut-ref="pt1"/>-->

            <!--
              问题：
                当配置了环绕通知后，切入点方法没有执行，而通知方法执行了
              分析：
                通过对比动态代理中的环绕接口通知代码，发现动态代理的环绕通知有明确的切入点调用，而我们的代码中没有
              解决：
                Spring框架为我们提供了一个接口：ProceedingJoinPoint。该接口有一个方法proceed()，此方法就相当于有明确调用切入点方法
                该接口可以作为环绕通知的方法参数，在程序执行时，Spring框架会为我们提供该接口的实现类供我们使用功能
              Spring中的环绕通知：
                它是Spring框架为我们提高的一种可以在代码中手动控制增强方法何时执行的方式
            -->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"/>

            <!--当前切面可用-->
            <!--<aop:pointcut id="pt1" expression="execution( * *..*.*(..))"/>-->
        </aop:aspect>
    </aop:config>
</beans>